= 文件结构 =
    可执行文件
        pl0
    源文件
        grammar.cpp
        morphology.cpp
        analysis.cpp
    头文件
        grammar.h
        morphology.h

= 系统结构 =
    Grammar 语法分析
        Morphology 词法分析(成员)
        Analysis 代码生成(成员)

    词法分析 -----nextToken-----> 语法分析
        返回token和token类型(类型划分详见struct.h中的recogTYPE)       

    语法分析 ----生成行为-------> 代码生成
        调用Analysis的各种行为函数来生成代码


= 语法分析 =
    * 范式：
        <程序>   ::= <分程序>. 
        <分程序>     ::= [<常量说明部分>][<变量说明部分>][<过程说明部分>]<语句> 
        <常量说明部分>  ::= const<常量定义>{,<常量定义>}; 
        <常量定义>   ::= <标识符>=<无符号整数> 
        <变量说明部分>  ::= var<标识符>{, <标识符>}; 
        <过程说明部分>  ::= <过程首部><分程序>{;<过程说明部分>} 
        <过程首部>   ::= procedure<标识符>; 
        <语句>   ::= <赋值语句>|<条件语句>|<当循环语句>|<过程调用语句>|<复合语句>|<读语句>|<写语句>|<空>  
        <赋值语句>   ::= <标识符> := <表达式> 
        <表达式>     ::= [+|-]<项>{<加法运算符><项>} 
        <项>     ::= <因子>{<乘法运算符><因子>} 
        <因子>   ::= <标识符>|<无符号整数>| ‘ ( ’ <表达式> ‘ ) ’ 
        <条件>   ::= <表达式><关系运算符><表达式>|odd<表达式> 
        <条件语句>   ::= if<条件>then<语句> 
        <当循环语句>     ::= while<条件>do<语句>  
        <过程调用语句>  ::= call<标识符>  
        <复合语句>   ::= begin<语句>{;<语句>}end 
        <读语句>     ::= read ‘ ( ’<标识符>{, <标识符>} ‘ ) ’ 
        <写语句>     ::= write ‘ ( ’<表达式>{, <表达式>} ‘ ) ’ 
    


= 词法分析 =
    * 范式
        <加法运算符>     ::= +|- 
        <乘法运算符>     ::= *|/ 
        <关系运算符>     ::= =|<>|<|<=|>|>= 
        <字母>   ::= a|b|c|d…..x|y|z  
        <数字>   ::= 0|1|2|3…...8|9 
        <无符号整数>     ::= <数字>{<数字>} 
        <标识符>     ::= <字母>{<字母>|<数字>} 

= 代码生成 =
    通过调用ana实例的各个行为函数生成PCODE。
    主要数据结构:
        whileLoopArr记录while函数循环回第一次判断时位置的桟
        jmpStack记录if/while 向下跳转目标的桟
        optStack 操作符桟
        P 生成的指令集
        T 过程结构体
        
    解释说明：
        * 生成的PCODE需要从1开始，与书中不同。
        * 函数X主程序中只能获得与之同级或直系祖辈的变量常量，否则认为变量不存在。
        * 变量名有不同级别的覆盖现象，但是，同级不能有相同函数名，否则报错
        * 每个过程只可以调用其自身内部的过程及直系亲属的内部函数，否则报错


= 特别说明 =
    全部代码均为原创，除PCODE形式参考课本解释和样例以外，其余部分均为独立思考完成。


= 代码生成 =
    


